pipeline {
    agent any
    environment {
        BRANCH_NAME = "${GIT_BRANCH.replaceAll('origin/', '')}"
        AWS_CRED_ID = "aws-creds"
        AWS_ECR_REGION = 'ap-south-1'
        ECR_REPO_URI = "839316227584.dkr.ecr.ap-south-1.amazonaws.com/myrepo"
        COMPOSE_FILENAME = "deployment/Docker-compose.yaml"
        DOCKER_FILENAME = "deployment/Dockerfile"
        SERVICE_NAME = "myservice_${BRANCH_NAME}"
    }
    stages {
        stage("Env Variables") {
            steps {
                script {
					sh "cd ${env.WORKSPACE}"
					echo "Branch name : ${env.BRANCH_NAME}"
					env.COMMIT = sh(returnStdout: true, script: 'echo $(git rev-parse --short HEAD)').trim()
					env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
					env.GIT_AUTHOR = sh (script: 'git log -1 --pretty=%cn ${GIT_COMMIT}', returnStdout: true).trim()                    
                    env.TAG = "${env.BRANCH_NAME}" + "-" + "${BUILD_NUMBER}"
					echo "Tag : ${env.TAG}"
                    env.IMAGE = "${env.ECR_REPO_URI}" + ":" + "${env.TAG}"
                } //script end           
            } //steps end
        } // env Variables stage end
        
            stage("Docker build") {
                steps {
                    sh """ 
                        docker build . -t ${env.ECR_REPO_URI}:${env.TAG} -f ${env.WORKSPACE}/${DOCKER_FILENAME}
                    """
                } // steps end
            } // docker build stage end

        stage("Docker push to AWS ECR") {
            steps
              {
                  script {
                    withAWS(region: "${AWS_ECR_REGION}", credentials: "${AWS_CRED_ID}") {
                        sh "${ecrLogin()}"
                        docker.image("${env.IMAGE}").push()
                        sh "docker rmi ${env.IMAGE} | true"
                    }
                }
            } // steps end
        } //  docker push stage end
        stage("Replacing Yaml Variables") {
            steps {
                sh """      
                    sed -i "s|CONTAINER_IMAGE|${env.IMAGE}|g" ${COMPOSE_FILENAME}
                """
            } //steps end
        } //Replacing yaml Variables stage end
        stage('Deploy to Docker Swarm') {
            steps {
                 script {
                    sh "docker stack deploy -c ${env.WORKSPACE}/${COMPOSE_FILENAME} ${SERVICE_NAME} --with-registry-auth"
                }
            } // steps end
        } // Deploy to Docker Swarm ends
    } //stages end
    post { 
        always { 
            deleteDir() // Clears Workspace
        }
    }
} // pipeline end


